Synchronizing with other branches' work, when not being on a dirty branch:
==========================================================================
    e.g. feature1

        for foo in $(git diff --name-only master);do vimdiff ${foo} <(git show master:${foo});done

    Doing merging/rebasing instead often makes it impossible to rebase ("clean up") history afterwards.
    Although merging could be very practical in dirty-branches
    (since the respective clean-branch merely does 'git merge --squash myDirtyBranch') 


master / Clean-branch / dirty-branch principle:
===============================================
    e.g. decoration / decorationDirty

    The dirty branch is the place for actual development.
    Code updates from other branches _COULD (??) be done by merging
    Alternatively this can be achieved by using the above technique.

    One should commit as often as possible.
    Each time a new significant state is being reached
    it's merged into the clean branch via 'git merge --squash myDirtyBranch'.
    Commits on the dirty branch get a tag to represent this action.

    This results in the clean-branch beeing relatively "readable".
    It might even be pushed (this is no problem since 'git merge --squash' merely ADDS history; as opposed to rebase...).
    The dirtyBranch should never be pushed at all.

    Since the clean-branches history is quite readable it can 
    be merged into master using a the regular merge-command 'git merge cleanBranch'

    Regular 'git log' will otuput these merge-commits.
    To avoid this, use 'git log --first-parent'.

